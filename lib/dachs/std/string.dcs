import std.array

class string_builder
    buffer : [string]

    init
        @buffer := [] : [string]
    end

    init(@buffer)
    end

    func append(s : string)
        @buffer << s
    end

    func <<(s : string)
        @buffer << s
        ret self
    end

    func size
        ret @buffer.size
    end

    func build
        ret @buffer.join
    end
end

class string
  - data : pointer(char)
  - size : uint

    init(@data, @size)
    end

    init(@data)
        @size := 0u # XXX
        @size = @strlen()
    end

    init
        @size := 0u
        @data := new pointer(char){0u}
    end

    cast : pointer(char)
        ret @data
    end

    cast : symbol
        ret __builtin_gen_symbol(@data, @size)
    end

    # Note:
    # No need to define deep copy operator because 'string' is immutable.

  - func strlen
        var i := 0u
        for @data[i] != '\0'
            i += 1u
        end
        ret i
    end

    func size
        ret @size
    end

    func [](idx)
        ret @data[idx]
    end

    func each_chars(block)
        var i := 0u
        for i < @size
            block(@data[i])
            i += 1u
        end
    end

    func empty?
        ret @size == 0u
    end

    func include?(ch : char)
        var i := 0u
        for i < @size
            ret true if @data[i] == ch
            i += 1u
        end

        ret false
    end

    func chars
        ret new array{@data, @size}
    end

    func start_with?(rhs : string)
        ret false if @size < rhs.size

        var i := 0u
        for i < rhs.size
            if @data[i] != rhs[i]
                ret false
            end

            i += 1u

            if i >= @size && i < rhs.size
                ret false
            end
        end

        ret true
    end

    func end_with?(rhs : string)
        ret true if rhs.empty?
        ret false if @size < rhs.size

        var li := @size - 1u
        var ri := rhs.size - 1u

        for li >= 0u
            if @data[li] != rhs[ri]
                ret false
            end

            ret true if ri == 0u

            li, ri -= 1u, 1u
        end

        ret false
    end

    func index_of(s : string, var idx : uint)
        sz := s.size

        find_at := -> i, buf do
            var j := 0u
            for j < sz
                ret false unless buf[i + j] == s[j]
                j += 1u
            end
            ret true
        end

        for idx < @size
            ret -1 if idx + sz > @size
            ret (idx as int) if find_at(idx, @data)
            idx += 1u
        end

        ret -1
    end

    func index_of(s : string)
        ret @index_of(s, 0u)
    end

    func index_of(c : char, var idx : uint)
        for idx < @size
            ret (idx as int) if @data[idx] == c
            idx += 1u
        end
        ret -1
    end

    func index_of(c : char)
        ret @index_of(c, 0u)
    end

    func slice(var start : uint, last : uint)
        ret "" if start > last || last >= @size

        s := last - start + 1u
        var ptr := new pointer(char){s}
        var i := 0u
        for start <= last
            ptr[i] = @data[start]
            start, i += 1u, 1u
        end
        ptr[i] = '\0'

        ret new string{ptr, s}
    end

    func split(sep : string)
        var start := 0u
        var result := [] : [string]
        var last := @index_of(sep)

        for last != -1
            result << @slice(start, last as uint - 1u)
            start = (last as uint) + sep.size
            last = @index_of(sep, start)
        end

        result << @slice(start, @size - 1u)

        ret result
    end

    func split(c : char)
        var start := 0u
        var result := [] : [string]
        var last := @index_of(c)

        for last != -1
            result << @slice(start, last as uint - 1u)
            start = (last as uint) + 1u
            last = @index_of(c, start)
        end

        result << @slice(start, @size - 1u)

        ret result
    end

    func split
        ret @split('\n')
    end

    func ==(rhs : string)
        ret false unless @size == rhs.size

        var i := 0u
        for i < @size
            ret false unless @data[i] == rhs[i]
            i += 1u
        end

        ret true
    end

    func !=(rhs : string)
        ret !(self == rhs)
    end

    func <(rhs : string)
        var i := 0u

        for i < @size
            case
            when @data[i] < rhs[i]
                ret true
            when @data[i] > rhs[i]
                ret false
            end

            i += 1u

            if i >= rhs.size
                ret false
            end
        end

        ret true
    end

    func +(rhs : string)
        var p := new pointer(char){@size + rhs.size + 1u}

        var i := 0u
        for i < @size
            p[i] = self[i]
            i += 1u
        end

        i = 0u
        for i < rhs.size
            p[i + @size] = rhs[i]
            i += 1u
        end

        p[i + @size] = '\0'

        ret new string{p, @size + rhs.size}
    end

    func *(num : uint)
        new_size := @size * num + 1u
        var p := new pointer(char){new_size}

        var i, var pos := 0u, 0u
        for i < num
            var j := 0u
            for j < @size
                p[pos] = @data[j]
                j, pos += 1u, 1u
            end
            i += 1u
        end

        p[new_size] = '\0'
        ret new string{p, new_size}
    end

    func chomp
        ret new string{@data, @size} if @empty?() || @data[@size - 1u] != '\n'
        var p := new pointer(char){@size}
        var i := 0u
        for i < @size
            p[i] = @data[i]
            i += 1u
        end
        p[@size] = '\0'
        ret new string{p, @size - 1u}
    end

    func count_by(predicate)
        var i, var c := 0u, 0u
        for i < @size
            c += 1u if predicate(@data[i])
            i += 1u
        end
        ret c
    end

    func count(chr : char)
        ret self.count_by {|c| c == chr }
    end

    func each_line(predicate)
        @split()
        self.split.each {|l| predicate(l) }
    end

    func reverse
        ret "" if @empty?()

        var p := new pointer(char){@size + 1u}
        var i := 0u
        for i < @size
            p[@size - 1u - i] = @data[i]
            i += 1u
        end
        p[@size] = '\0'

        ret new string{p, @size}
    end

    func print
        print(@data)
    end

    func println
        println(@data)
    end
end

func to_string(x)
    ret x as string
end
