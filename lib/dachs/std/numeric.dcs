import std.char

func succ(i : int)
    ret i + 1
end

func succ(i : uint)
    ret i + 1u
end

func even?(i : int)
    ret i % 2 == 0
end

func even?(i : uint)
    ret i % 2u == 0u
end

func odd?(i : int)
    ret i % 2 == 1
end

func odd?(i : uint)
    ret i % 2u == 1u
end

func zero?(i : int)
    ret i == 0
end

func zero?(i : uint)
    ret i == 0u
end

func times(i : uint, pred)
    var c := 0u
    for c < i
        pred()
        c += 1u
    end
end

func times(i : int, pred)
    fatal("negative number for times()") if i < 0
    times(i as uint, pred)
end

func upto(var i : int, to : int, step : int, predicate)
    for i < to
        predicate(i)
        i += step
    end
end

func upto(var i : int, to : int, predicate)
    i.upto(to, 1, predicate)
end

func abs(i)
    ret if i < (0 as typeof(i)) then
        -i
    else
        i
    end
end

# TODO
# Caluculate the size of buffer for string in advance
# to avoid resizing the buffer of array.
func to_string(var i : int, b)
    ret "0" if i == 0

    base := b as int
    var buffer := [] : [char]
    negate := i < 0
    i = i.abs

    for i != 0
        buffer << ((i % base) as char).to_radix
        i = i / base
    end

    buffer << '-' if negate

    ret reverse_string_of(buffer)
end

func to_string(i : int)
    ret i.to_string(10)
end

# TODO
# Caluculate the size of buffer for string in advance
# to avoid resizing the buffer of array.
func to_string(var u : uint, b)
    ret "0u" if u == 0u

    base := b as uint
    var buffer := ['u'] : [char]

    for u != 0u
        buffer << ((u % base) as char).to_radix
        u = u / base
    end

    ret reverse_string_of(buffer)
end

func to_string(u : uint)
    ret u.to_string(10u)
end

cast(i : int) : string
    ret i.to_string
end

cast(u : uint) : string
    ret u.to_string
end
