import std.char

func succ(i : int)
    ret i + 1
end

func succ(i : uint)
    ret i + 1u
end

func odd?(i : int)
    ret i % 2 == 1
end

func odd?(i : uint)
    ret i % 2u == 1u
end

func zero?(i : int)
    ret i == 0
end

func zero?(i : uint)
    ret i == 0u
end

func times(i : int, pred)
    var c := 0
    for c < i
        pred()
        c += 1
    end
end

func times(i : uint, pred)
    times(i as int, pred)
end

func upto(var i : int, to : int, step : int, predicate)
    for i < to
        predicate(i)
        i += step
    end
end

func upto(var i : int, to : int, predicate)
    i.upto(to, 1, predicate)
end

func abs(i)
    if i < (0 as typeof(i))
        ret -i
    else
        ret i
    end
end

cast(var i : int) : string
    if i == 0
        ret "0"
    end

    var buffer := [] : [char]
    negative := i < 0
    i = i.abs

    for i != 0
        buffer << (i % 10) as char + '0'
        i = i / 10
    end

    if negative
        buffer << '-'
        i = -i
    end

    buffer.reverse'
    ret string_of(buffer)
end

cast(var u : uint) : string
    if u == 0u
        ret "0u"
    end

    var buffer := ['u'] : [char]

    for u != 0u
        buffer << (u % 10u) as char + '0'
        u = u / 10u
    end

    buffer.reverse'
    ret string_of(buffer)
end

# XXX:
# This implementation is too bad.
# I should use snprintf() to convert float value to string.
cast(var f : float) : string
    var buffer := [] : [char]

    integer := f.abs as int
    decimal := begin
        var i := ((f.abs - (integer as float)) * 1000000.0) as int
        for i % 10 == 0
            i /= 10
        end
        ret i
    end

    var builder := new string_builder

    builder << "-" if f < 0.0
    builder << integer as string << "." << decimal as string

    ret builder.build
end
