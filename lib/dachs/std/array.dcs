class array
  - buf
  - capacity
  - size

    init(@buf)
        @capacity := @buf.size
        @size := @buf.size
    end

    func assign(rhs)
        if rhs.size > @capacity
            ret false
        end

        var i := 0u
        for i < rhs.size
            @buf[i] = rhs[i]
            i += 1u
        end
        @size = rhs.size

        ret true
    end

    func assign(rhs : array)
        if rhs.capacity > @capacity
            fatal("over capacity. reallocation is needed.")
        end

        @size = rhs.size

        var i := 0u
        for i < rhs.size
            @buf[i] = rhs.at(i)
            i += 1u
        end
    end

    func clear
        @size = 0u
    end

    func size
        ret @size
    end

    func capacity
        ret @capacity
    end

    func out_of_bounds?(idx)
        i := idx as int
        ret i < 0 || @size <= i
    end

    func each(predicate)
        var i := 0u
        for i < @size
            predicate(@buf[i])
            i += 1u
        end
    end

    func each_with_index(predicate)
        var i := 0u
        for i < @size
            predicate(@buf[i], i)
            i += 1u
        end
    end

    func each_with_object(var obj, predicate)
        self.each do |i|
            predicate(obj, i)
        end
    end

    func append(elem)
        if @size+1u > @capacity
            ret false
        end

        @buf[@size] = elem
        @size += 1u
        ret true
    end

    func at(idx)
        if idx as uint >= @size
            ret @buf[0], true
        end

        ret @buf[idx], false
    end

    func op_at(idx)
        ret @buf[idx]
    end
end
