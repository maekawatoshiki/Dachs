class array
  - buf
  - capacity : uint
  - size : uint

    # TODO:
    # init(rhs : static_array)
    #     @size := rhs.size
    #     @capacity := @size
    #     @buf := new pointer(typeof(rhs[0])){@size}
    # end

    # TODO:
    # init(@size : uint)
    #     @buf := new typeof(@buf[0]){@size}
    #     @capacity := @size
    # end

    init(@buf : pointer, @size : uint)
        @capacity := @size
    end

    init(@size : uint, elem)
        @capacity := @size
        @buf := new pointer(typeof(elem)){@size}
        var i := 0u
        for i < @size
            @buf[i] = elem
            i += 1u
        end
    end

    # func :=
    #     var new_buf := new typeof(@buf){@size}
    #     var i := 0u
    #     for i < @size
    #         new_buf[i] = @buf[i]
    #         i += 1u
    #     end
    #     ret new [typeof(@buf[0])]{new_buf, @size}
    # end

    init(s : int, block)
        @size := s as uint
        @capacity := @size
        @buf := new pointer{@size}
        var i := 0u
        for i < @size
            @buf[i] = block(i)
            i += 1u
        end
    end

    func assign(rhs)
        if rhs.size > @capacity
            ret false
        end

        var i := 0u
        for i < rhs.size
            @buf[i] = rhs[i]
            i += 1u
        end
        @size = rhs.size

        ret true
    end

    func []=(idx, rhs)
        @buf[idx] = rhs
    end

    func clear
        @size = 0u
    end

    func size
        ret @size
    end

    func capacity
        ret @capacity
    end

    func data
        ret @buf
    end

    func out_of_bounds?(idx)
        i := idx as int
        ret i < 0 || @size <= i
    end

    func fill(elem)
        var i := 0u
        for i < @size
            @buf[i] = elem
            i += 1u
        end
    end

    func each(predicate)
        var i := 0u
        for i < @size
            predicate(@buf[i])
            i += 1u
        end
    end

    func each_with_index(predicate)
        var i := 0u
        for i < @size
            predicate(@buf[i], i)
            i += 1u
        end
    end

    func each_with_object(obj, predicate)
        self.each do |i|
            predicate(obj, i)
        end
    end

    func append(elem)
        if @size+1u > @capacity
            ret false
        end

        @buf[@size] = elem
        @size += 1u
        ret true
    end

    func at(idx)
        if idx as uint >= @size
            ret @buf[0], true
        end

        ret @buf[idx], false
    end

    func [](idx)
        ret @buf[idx]
    end

    func empty?
        ret @size == 0u
    end

    func include?(elem)
        var i := 0u
        for i < @size
            if @buf[i] == elem
                ret true
            end
            i += 1u
        end

        ret false
    end

    func head
        ret @buf[0u]
    end

    func last
        ret @buf[@size - 1u]
    end

    func print
        print('[')

        if @empty?()
            print(']')
            ret
        end

        var i := 0u
        for i < @size - 1u
            print(@buf[i])
            print(',')
            i += 1u
        end
        print(@last())
        print(']')
    end

    func println
        @print()
        print('\n')
    end

    func ==(rhs : array)
        ret false unless @size == rhs.size

        var i := 0u
        for i < @size
            ret false unless @buf[i] == rhs[i]
            i += 1u
        end

        ret true
    end

    func !=(rhs : array)
        ret !(self == rhs)
    end
end

