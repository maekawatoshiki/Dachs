func digit?(c : char)
    ret '0' <= c && c <= '9'
end

func xdigit?(c : char)
    ret c.digit? ||
        ('a' <= c && c <= 'f') ||
        ('A' <= c && c <= 'F')
end

func succ(c : char)
    ret c + (1 as char)
end

func lower?(c : char)
    ret 'a' <= c && c <= 'z'
end

func upper?(c : char)
    ret 'A' <= c && c <= 'Z'
end

func alphabet?(c : char)
    ret c.lower? || c.upper?
end

func alnum?(c : char)
    ret c.alphabet? || c.digit?
end

# Ref: http://en.cppreference.com/w/cpp/string/byte/isspace
func printable?(c : char)
    code := c as uint
    ret 0x20u <= code && code <= 0x7eu
end

func cntrl?(c : char)
    ret !c.printable?
end

func space?(c : char)
    ret c == '\t' ||
        c == ' '  ||
        c == '\n' ||
        c == '\r'
end

func to_upper(c : char)
    ret if c.lower? then
        (c - 'a') + 'A'
    else
        c
    end
end

func to_lower(c : char)
    ret if c.upper? then
        (c - 'A') + 'a'
    else
        c
    end
end

cast (c : char) : string
    var p := new pointer(char){2u}
    p[0u] = c
    p[1u] = '\0'
    ret new string{p, 1u}
end

func string_of(cs : [char]) : string
    var p := new pointer(char){cs.size + 1u}
    var i := 0u
    for i < cs.size
        p[i] = cs[i]
        i += 1u
    end
    p[i] = '\0'
    ret new string{p, cs.size}
end

func reverse_string_of(cs : [char]) : string
    var p := new pointer(char){cs.size + 1u}
    var i := 0u
    for i < cs.size
        p[i] = cs[cs.size - i - 1u]
        i += 1u
    end
    p[i] = '\0'
    ret new string{p, cs.size}
end

func to_radix(i) : char
    n := i as int
    ret case
    when 0 <= n && n < 10
        n as char + '0'
    when 10 <= n && n < 36
        (n - 10) as char + 'a'
    else
        fatal("invalid radix")
        '\0'
    end
end
