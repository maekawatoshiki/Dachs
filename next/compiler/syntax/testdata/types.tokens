TYPE:type
IDENT:A
OF:of
IDENT:int
NEWLINE:
TYPE:type
IDENT:B
OF:of
LBRACE:{
IDENT:name
RBRACE:}
NEWLINE:
TYPE:type
IDENT:C
OF:of
IDENT:B
LBRACE:{
IDENT:str
RBRACE:}
NEWLINE:
TYPE:type
IDENT:D
OF:of
LBRACE:{
IDENT:name
COLON::
IDENT:str
RBRACE:}
NEWLINE:
TYPE:type
IDENT:E
OF:of
LBRACE:{
IDENT:name
COLON::
IDENT:'a
RBRACE:}
NEWLINE:
TYPE:type
IDENT:F
OF:of
LBRACE:{
IDENT:a
COMMA:,
IDENT:b
RBRACE:}
NEWLINE:
TYPE:type
IDENT:G
OF:of
LBRACE:{
NEWLINE:
IDENT:a
COLON::
IDENT:int
NEWLINE:
IDENT:b
COLON::
IDENT:str
NEWLINE:
RBRACE:}
NEWLINE:
TYPE:type
IDENT:H
OF:of
LBRACE:{
IDENT:a
COLON::
IDENT:int
COMMA:,
IDENT:b
RBRACE:}
NEWLINE:
TYPE:type
IDENT:I
OF:of
IDENT:F
LBRACE:{
IDENT:'a
COMMA:,
IDENT:str
RBRACE:}
NEWLINE:
TYPE:type
IDENT:J
OF:of
LBRACKET:[
IDENT:int
RBRACKET:]
NEWLINE:
TYPE:type
IDENT:K
OF:of
LBRACKET:[
IDENT:int
FAT_RIGHT_ARROW:=
IDENT:str
RBRACKET:]
NEWLINE:
TYPE:type
IDENT:L
OF:of
LBRACE:{
NEWLINE:
IDENT:map
COLON::
LBRACKET:[
IDENT:int
FAT_RIGHT_ARROW:=
IDENT:'value
RBRACKET:]
NEWLINE:
IDENT:array
COLON::
LBRACKET:[
IDENT:'elem
RBRACKET:]
NEWLINE:
RBRACE:}
NEWLINE:
NEWLINE:
FUNC:func
IDENT:main
NEWLINE:
END:end
NEWLINE:
EOF:
