TYPE:type
IDENT:A
ASSIGN:=
IDENT:int
NEWLINE:
TYPE:type
IDENT:B
ASSIGN:=
LBRACE:{
IDENT:name
RBRACE:}
NEWLINE:
TYPE:type
IDENT:C
ASSIGN:=
IDENT:B
LBRACE:{
IDENT:str
RBRACE:}
NEWLINE:
TYPE:type
IDENT:D
ASSIGN:=
LBRACE:{
IDENT:name
COLON::
IDENT:str
RBRACE:}
NEWLINE:
TYPE:type
IDENT:E
ASSIGN:=
LBRACE:{
IDENT:name
COLON::
SINGLE_QUOTE:'
IDENT:a
RBRACE:}
NEWLINE:
TYPE:type
IDENT:F
ASSIGN:=
LBRACE:{
IDENT:a
COMMA:,
IDENT:b
RBRACE:}
NEWLINE:
TYPE:type
IDENT:G
ASSIGN:=
LBRACE:{
NEWLINE:
IDENT:a
COLON::
IDENT:int
NEWLINE:
IDENT:b
COLON::
IDENT:str
NEWLINE:
RBRACE:}
NEWLINE:
TYPE:type
IDENT:H
ASSIGN:=
LBRACE:{
IDENT:a
COLON::
IDENT:int
COMMA:,
IDENT:b
RBRACE:}
NEWLINE:
TYPE:type
IDENT:I
ASSIGN:=
IDENT:F
LBRACE:{
SINGLE_QUOTE:'
IDENT:a
COMMA:,
IDENT:str
RBRACE:}
NEWLINE:
TYPE:type
IDENT:J
ASSIGN:=
LBRACKET:[
IDENT:int
RBRACKET:]
NEWLINE:
TYPE:type
IDENT:K
ASSIGN:=
LBRACKET:[
IDENT:int
FAT_RIGHT_ARROW:=
IDENT:str
RBRACKET:]
NEWLINE:
TYPE:type
IDENT:L
ASSIGN:=
LBRACE:{
NEWLINE:
IDENT:map
COLON::
LBRACKET:[
IDENT:int
FAT_RIGHT_ARROW:=
SINGLE_QUOTE:'
IDENT:value
RBRACKET:]
NEWLINE:
IDENT:array
COLON::
LBRACKET:[
SINGLE_QUOTE:'
IDENT:elem
RBRACKET:]
NEWLINE:
RBRACE:}
NEWLINE:
NEWLINE:
FUNC:func
IDENT:main
NEWLINE:
END:end
NEWLINE:
EOF:
