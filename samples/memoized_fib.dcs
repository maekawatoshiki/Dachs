class MemoizedFib
  - memo : [(uint, uint)]

    init(@memo)
    end

    init
        @memo := [] : [(uint, uint)]
        @memo.reserve(100u)
    end

  - func index_of_memo(n)
        ret @memo.find_index_by{|v| v[0] == n }
    end

    func calc(n)
        ret 1u if n <= 1u

        found, idx := @index_of_memo(n)

        ret @memo[idx][1] if found

        v := @calc(n-1u) + @calc(n-2u)
        @memo << (n, v)
        ret v
    end

    func reset
        @memo.clear
    end
end


func main
    fib := new MemoizedFib

    # Note:
    # The result is wrong because the result is too big for 64bit unsigned integer
    fib.calc(1000u).println
end
