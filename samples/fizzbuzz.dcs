#{
  If 'var' is specified, the argument is copied and passed by value
  then mutable.  Otherwise, the argument is passed by reference then
  immutable. Variable definition has the same rule as this.
  Type of arguments and returned value are deduced automatically.
 
  If you want to specify the type of argument, you can use ':'.
  e.g.</i>
    func step_to(var first : float, last : float, block) : ()
}#
func step_to(var first, last, p)
    for first <= last
        p(first)
        first += 1
    end
end



func fizzbuzz(n)
    case
    when n % 15 == 0 then "fizzbuzz".println
    when n % 3 == 0  then "fizz".println
    when n % 5 == 0  then "buzz".println
    else                  n.println
    end
end



#{
  UFCS is implemented.
  '1.step_to n' is equivalent to 'step_to(1, n)'

  Dachs has a block inspired from Ruby.
  do-end block is passed to the last argument of callee as lambda object.
  Here, 'block' variable is captured into do-end block.
}#
func fizzbuzz(n, p)
    1.step_to n do |i|
        case
        when i % 15 == 0
            p("fizzbuzz")
        when i %  3 == 0
            p("fizz")
        when i %  5 == 0
            p("buzz")
        else
            p(i)
        end
    end
end



func main

    # FizzBuzz #1
    begin
        var i := 1
        for i <= 100
            fizzbuzz(i)
            i += 1
        end
    end

    # FizzBuzz #2
    1.step_to 100, fizzbuzz

    # FizzBuzz #3
    fizzbuzz 100 do |i|
        println(i)
    end
end
