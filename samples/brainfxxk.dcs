class BrainFxxk
  - memory, tape
  , pointer : uint
  , head : uint

    init(@memory)
        @tape := ""
    end

    init(@memory)
        @memory := new [int]{30000u, 0}
        @tape := ""
    end

  - func incr
        @pointer += 1u
    end

  - func decr
        @pointer -= 1u
    end

  - func incr_val
        @memory[@pointer] += 1
    end

  - func decr_val
        @memory[@pointer] -= 1
    end

  - func put
        print(@memory[@pointer] as char)
    end

  - func get
        @memory[@pointer] = __builtin_getchar() as int
    end

  - func loop
        ret unless @memory[@pointer] == 0

        var stack := 0u
        for true
            @head += 1u
            case @tape[@head]
            when '['
                stack += 1u
            when ']'
                if stack == 0u
                    ret
                else
                    stack -= 1u
                end
            end
        end
    end

  - func repeat
        var stack := 0u
        for true
            @head -= 1u
            case @tape[@head]
            when ']'
                stack += 1u
            when '['
                if stack == 0u
                    # Read '[' again
                    @head -= 1u
                    ret
                else
                    stack -= 1u
                end
            end
        end
    end

  - func step
        case @tape[@head]
        when '>' then @incr()
        when '<' then @decr()
        when '+' then @incr_val()
        when '-' then @decr_val()
        when '.' then @put()
        when ',' then @get()
        when '[' then @loop()
        when ']' then @repeat()
        end
    end

    func run(code)
        @head = 0u
        @pointer = 0u
        @tape = code

        for @head < @tape.size
            @step()
            @head += 1u
        end
    end
end

func main
    program := "+++++++++[>++++++++>+++++++++++>+++++<<<-]>.>++.+++++++..+++.>-.------------.<++++++++.--------.+++.------.--------.>+."

    var interpreter := new BrainFxxk
    interpreter.run program
end
